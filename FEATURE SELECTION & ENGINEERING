## Step 1: Load Libraries and Data

import pandas as pd
import numpy as np

# Load cleaned datasets
matches = pd.read_csv('cleaned_matches.csv')
deliveries = pd.read_csv('cleaned_deliveries.csv')

1. Match-level Features

match_features = matches[[
    'id', 'season', 'city', 'team1', 'team2', 'toss_winner', 'toss_decision',
    'winner', 'player_of_match', 'venue', 'result', 'dl_applied'
]]
print(match_features.head())

2. Delivery-level Features

delivery_features = deliveries[[
    'match_id', 'inning', 'batting_team', 'bowling_team', 'over', 'ball',
    'batsman', 'non_striker', 'bowler', 'batsman_runs', 'extra_runs',
    'total_runs', 'player_dismissed', 'dismissal_kind'
]]
print(delivery_features.head())

1. Total Runs per Batsman

batsman_runs = deliveries.groupby('batsman')['batsman_runs'].sum().reset_index()
batsman_runs.columns = ['batsman', 'total_runs']
print(batsman_runs.sort_values(by='total_runs', ascending=False).head())

2. Strike Rate per Batsman

balls_faced = deliveries[deliveries['wide_runs'] == 0].groupby('batsman')['ball'].count()
batsman_runs['balls_faced'] = batsman_runs['batsman'].map(balls_faced)
batsman_runs['strike_rate'] = (batsman_runs['total_runs'] / batsman_runs['balls_faced']) * 100
batsman_runs = batsman_runs.dropna()
print(batsman_runs.sort_values(by='strike_rate', ascending=False).head())

3. Total Wickets per Bowler

dismissals = deliveries[deliveries['dismissal_kind'].isin(['bowled', 'caught', 'lbw', 'stumped', 'caught and bowled', 'hit wicket'])]
bowler_wickets = dismissals.groupby('bowler')['player_dismissed'].count().reset_index()
bowler_wickets.columns = ['bowler', 'wickets']
print(bowler_wickets.sort_values(by='wickets', ascending=False).head())

4. Economy Rate per Bowler

total_runs_given = deliveries.groupby('bowler')['total_runs'].sum()
total_overs = deliveries.groupby('bowler').apply(lambda x: x['over'].nunique())

economy = (total_runs_given / total_overs).reset_index()
economy.columns = ['bowler', 'economy_rate']
print(economy.sort_values(by='economy_rate').head())

5. Toss Impact Feature (Did Toss Winner Win Match?)

matches['toss_win_match_win'] = matches['toss_winner'] == matches['winner']
matches['toss_win_match_win'] = matches['toss_win_match_win'].astype(int)  # 1 if true, else 0

toss_effect = matches['toss_win_match_win'].value_counts(normalize=True) * 100
print("Toss win resulting in match win (%):\n", toss_effect)

6. Match Outcome Label (for ML)

# Create a binary label: 1 if team1 wins, 0 if team2 wins
matches['team1_win'] = (matches['winner'] == matches['team1']).astype(int)
print(matches[['team1', 'team2', 'winner', 'team1_win']].head())
